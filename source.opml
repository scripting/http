<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 07 Jun 2021 14:56:01 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: daveHttp</title>
		<dateCreated>Thu, 08 Jun 2017 12:07:57 GMT</dateCreated>
		<dateModified>Mon, 07 Jun 2021 14:56:01 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 3, 32</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>45</windowTop>
		<windowLeft>979</windowLeft>
		<windowBottom>1149</windowBottom>
		<windowRight>2148</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/davehttp/">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;davehttp&quot;,"/>
					<outline text="&quot;description&quot;: &quot;The heart of a Node-based web server to be included in other apps. I got tired of writing the same code over and over.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.33&quot;,"/>
					<outline text="&quot;main&quot;: &quot;davehttp.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/http.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;davehttp.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;strftime&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="davehttp.js">
				<outline text="var myProductName = &quot;davehttp&quot;, myVersion = &quot;0.4.33&quot;;   " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="/*  The MIT License (MIT)">
					<outline text="Copyright (c) 2014-2017 Dave Winer"/>
					<outline text=""/>
					<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"/>
					<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"/>
					<outline text="in the Software without restriction, including without limitation the rights"/>
					<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"/>
					<outline text="copies of the Software, and to permit persons to whom the Software is"/>
					<outline text="furnished to do so, subject to the following conditions:"/>
					<outline text=""/>
					<outline text="The above copyright notice and this permission notice shall be included in all"/>
					<outline text="copies or substantial portions of the Software."/>
					<outline text=""/>
					<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"/>
					<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"/>
					<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"/>
					<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"/>
					<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"/>
					<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"/>
					<outline text="SOFTWARE."/>
					<outline text="*/"/>
					</outline>
				<outline text=""/>
				<outline text="exports.start = startup; "/>
				<outline text="" isComment="true"/>
				<outline text="Notes" isComment="true">
					<outline text="1/3/18; 12:17:40 PM by DW">
						<outline text="Added support for POST messages. We store the post body in theRequest.postBody. Now the app doesn't have to do this for itself."/>
						</outline>
					</outline>
				<outline text="" isComment="true"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const http = require (&quot;http&quot;); " created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549"/>
				<outline text="const https = require (&quot;https&quot;);" created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549"/>
				<outline text="const urlpack = require (&quot;url&quot;);" created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074"/>
				<outline text="const strftime = require (&quot;strftime&quot;);"/>
				<outline text="const dns = require (&quot;dns&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text=""/>
				<outline text="const urlDefaultFavicon = &quot;http://scripting.com/favicon.ico&quot;; //11/24/18 by DW"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="ctStarts: 0, "/>
					<outline text="whenLastStart: new Date (0),"/>
					<outline text="ctHits: 0, ctHitsToday: 0,"/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text="ctWriteStats: 0,"/>
					<outline text="whenLastWriteStats: new Date (0),"/>
					<outline text="hitsByDomain: {},"/>
					<outline text="hitsByDomainToday: {},"/>
					<outline text="hitsByUrlToday: {}"/>
					<outline text="};"/>
					</outline>
				<outline text="var flStatsDirty = false;"/>
				<outline text=""/>
				<outline text="function dnsGetDomainName (ipAddress, callback) { //9/28/19 by DW">
					<outline text="if (ipAddress === undefined) {">
						<outline text="var err = {">
							<outline text="message: &quot;Can't get the domain name for the address because it is undefined.&quot;"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (err);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="try {">
							<outline text="dns.reverse (ipAddress, function (err, domains) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, domains [0]);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="} "/>
					</outline>
				<outline text=""/>
				<outline text="function startup (config, callback) {">
					<outline text="console.log (&quot;davehttp.startup: launching on port == &quot; + config.port + &quot;, v&quot; + myVersion + &quot;.&quot;);"/>
					<outline text=""/>
					<outline text="if (config.flPostEnabled === undefined) { //1/3/18 by DW">
						<outline text="config.flPostEnabled = false;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (config.blockedAddresses === undefined) { //4/17/18 by DW">
						<outline text="config.blockedAddresses = new Array ();"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="console.log (&quot;\ndavehttp.startup: config == &quot; + utils.jsonStringify (config));"/>
					<outline text=""/>
					<outline text="function handleRequest (httpRequest, httpResponse) {">
						<outline text="Changes" isComment="true">
							<outline text="9/28/19; 11:44:45 AM by DW">
								<outline text="It's possible for httpRequest.connection.remoteAddress to be undefined. Not sure what the circumstances are, but it is documented. "/>
								</outline>
							<outline text="11/24/18; 10:39:04 AM by DW">
								<outline text="Allow for the possibility of requests being handled here and not passed down to the callback. Start with /favicon.ico."/>
								</outline>
							</outline>
						<outline text="function doHttpReturn (code, type, s, headers) { //10/7/16 by DW">
							<outline text="Changes" isComment="true">
								<outline text="9/28/18; 5:50:50 PM by DW">
									<outline text="Okay let's be more clued in. If it's a buffer, return that. Otherwise convert to a string."/>
									</outline>
								<outline text="9/17/18; 7:50:19 PM by DW">
									<outline text="Instead of converting the returned value to a string, return it as it was provided to us. If the caller sends a buffer, pass the buffer through."/>
									</outline>
								</outline>
							<outline text="if (headers === undefined) {">
								<outline text="headers = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="headers [&quot;Content-Type&quot;] = type;"/>
							<outline text="if (utils.getBoolean (config.flAllowAccessFromAnywhere)) {">
								<outline text="headers [&quot;Access-Control-Allow-Origin&quot;] = &quot;*&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="httpResponse.writeHead (code, headers);"/>
							<outline text="if (Buffer.isBuffer (s)) { //9/28/18 by DW">
								<outline text="httpResponse.end (s); //9/17/18 by DW"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="httpResponse.end (s.toString ());    "/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function returnRedirect (url, code) {">
							<outline text="Changes" isComment="true">
								<outline text="6/2/19; 1:18:56 PM by DW">
									<outline text="This never worked, we weren't passing in the location header. Now we do. ;-)"/>
									</outline>
								</outline>
							<outline text="var headers = {">
								<outline text="location: url"/>
								<outline text="};"/>
								</outline>
							<outline text="if (code === undefined) {">
								<outline text="code = 302;"/>
								<outline text="}"/>
								</outline>
							<outline text="" isComment="true"/>
							<outline text="console.log (&quot;returnRedirect: url == &quot; + url + &quot;, code == &quot; + code);" isComment="true"/>
							<outline text="doHttpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
							<outline text="}"/>
							<outline text=""/>
							</outline>
						<outline text="function isBlockedAddress (theAddress) {">
							<outline text="for (var i = 0; i &lt; config.blockedAddresses.length; i++) { ">
								<outline text="if (theAddress == config.blockedAddresses [i]) {">
									<outline text="return (true);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var remoteAddress = httpRequest.connection.remoteAddress;"/>
						<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true);"/>
						<outline text=""/>
						<outline text="if (isBlockedAddress (remoteAddress)) {">
							<outline text="doHttpReturn (403, &quot;text/plain&quot;, &quot;Forbidden.&quot;);"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var myRequest = {">
							<outline text="method: httpRequest.method,"/>
							<outline text="lowermethod: httpRequest.method.toLowerCase (),"/>
							<outline text="path: parsedUrl.pathname,"/>
							<outline text="lowerpath: parsedUrl.pathname.toLowerCase (),"/>
							<outline text="params: {},"/>
							<outline text="host: httpRequest.headers.host,"/>
							<outline text="port: 80,"/>
							<outline text="referrer: undefined,"/>
							<outline text="flLocalRequest: false,"/>
							<outline text="flNoCache: utils.getBoolean (parsedUrl.query.nocache),"/>
							<outline text="client: httpRequest.connection.remoteAddress,"/>
							<outline text="now: new Date (),"/>
							<outline text="sysRequest: httpRequest,"/>
							<outline text="sysResponse: httpResponse,"/>
							<outline text="httpReturn: doHttpReturn"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="if (myRequest.host !== undefined) { //4/17/18 by DW">
							<outline text="myRequest.lowerhost = myRequest.host.toLowerCase ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="myRequest.host = &quot;&quot;; //9/18/19 by DW"/>
							<outline text="myRequest.lowerhost = &quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (utils.stringContains (myRequest.host, &quot;:&quot;)) { //set host and port">
							<outline text="myRequest.port = utils.stringNthField (myRequest.host, &quot;:&quot;, 2);"/>
							<outline text="myRequest.host = utils.stringNthField (myRequest.host, &quot;:&quot;, 1);"/>
							<outline text="}"/>
							</outline>
						<outline text="myRequest.lowerhost = myRequest.host.toLowerCase ();"/>
						<outline text="myRequest.flLocalRequest = utils.beginsWith (myRequest.lowerhost, &quot;localhost&quot;);"/>
						<outline text=""/>
						<outline text="myRequest.referrer = httpRequest.headers.referer;"/>
						<outline text="if (myRequest.referrer === undefined) {">
							<outline text="myRequest.referrer = &quot;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="for (var x in parsedUrl.query) {">
							<outline text="myRequest.params [x] = parsedUrl.query [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="console.log (&quot;handleRequest: parsedUrl == &quot; + utils.jsonStringify (parsedUrl));" isComment="true"/>
						<outline text=""/>
						<outline text="if (typeof (remoteAddress) != &quot;string&quot;) { //9/26/19 AM by DW -- debugging">
							<outline text="console.log (&quot;handleRequest: typeof (remoteAddress) == &quot; + typeof (remoteAddress));"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="dnsGetDomainName (remoteAddress, function (err, domain) {">
							<outline text="if (!err) {">
								<outline text="myRequest.client = domain;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (myRequest.client === undefined) { ">
								<outline text="myRequest.client = &quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isBlockedAddress (myRequest.client)) { //9/25/19 by DW">
								<outline text="doHttpReturn (403, &quot;text/plain&quot;, &quot;Forbidden.&quot;);"/>
								<outline text="return;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (config.flLogToConsole) {">
								<outline text="console.log (myRequest.now.toLocaleTimeString () + &quot; &quot; + myRequest.method + &quot; &quot; + myRequest.host + &quot;:&quot; + myRequest.port + &quot; &quot; + myRequest.lowerpath + &quot; &quot; + myRequest.referrer + &quot; &quot; + myRequest.client);"/>
								<outline text="}"/>
								</outline>
							<outline text="//stats">
								<outline text="//hits today">
									<outline text="if (!utils.sameDay (myRequest.now, stats.whenLastHit)) { //day rollover">
										<outline text="stats.ctHitsToday = 0;"/>
										<outline text="stats.hitsByDomainToday = {};"/>
										<outline text="stats.hitsByUrlToday = {};"/>
										<outline text="}"/>
										</outline>
									</outline>
								<outline text="stats.ctHits++;"/>
								<outline text="stats.whenLastHit = myRequest.now;"/>
								<outline text="stats.ctHitsToday++;"/>
								<outline text="flStatsDirty = true;"/>
								</outline>
							<outline text=""/>
							<outline text="function callBackToApp (theRequest) {">
								<outline text="if (callback !== undefined) {">
									<outline text="try {">
										<outline text="callback (theRequest);"/>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {" created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669">
										<outline text="console.log (myProductName + &quot; v&quot; + myVersion + &quot;: err.message == &quot; + err.message); "/>
										<outline text="console.trace (); //10/23/20 by DW"/>
										<outline text="doHttpReturn (500, &quot;text/plain&quot;, err.message);"/>
										<outline text="}" created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (config.flPostEnabled &amp;&amp; (myRequest.lowermethod == &quot;post&quot;)) {">
								<outline text="let body = &quot;&quot;;"/>
								<outline text="httpRequest.on (&quot;data&quot;, function (data) {">
									<outline text="body += data;"/>
									<outline text="});"/>
									</outline>
								<outline text="httpRequest.on (&quot;end&quot;, function () {">
									<outline text="myRequest.postBody = body;"/>
									<outline text="callBackToApp (myRequest);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var flNotHandledHere = true; //11/24/18 by DW"/>
								<outline text="switch (myRequest.lowerpath) {">
									<outline text="case &quot;/favicon.ico&quot;:" created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
										<outline text="var urlFavIcon = urlDefaultFavicon;"/>
										<outline text="if (config.urlFavicon !== undefined) {">
											<outline text="urlFavIcon = config.urlFavicon;"/>
											<outline text="}"/>
											</outline>
										<outline text="returnRedirect (urlFavIcon);"/>
										<outline text="flNotHandledHere = false;"/>
										<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (flNotHandledHere) {">
									<outline text="callBackToApp (myRequest);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="try { //6/21/20 by DW">
						<outline text="http.createServer (handleRequest).listen (config.port);"/>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="console.log (myProductName + &quot; v&quot; + myVersion + &quot;: err.message == &quot; + err.message); "/>
						<outline text="console.trace (); //10/23/20 by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="### The basics of an HTTP server">
					<outline text="This code was showing up all over the place. Handle an HTTP request with logging. A few other amenities. Rather than do a crappy job over and over, I decided to do a good job once,  then &lt;a href=&quot;https://www.npmjs.com/package/davehttp&quot;&gt;reuse&lt;/a&gt; the result. There's still more work to do, but it's useful right now as-is."/>
					<outline text="Dave Winer"/>
					</outline>
				<outline text="### Updates">
					<outline text="#### 10/23/20 by DW">
						<outline text="Added a call to &lt;a href=&quot;https://nodejs.org/api/console.html#console_console_trace_message_args&quot;&gt;console.trace&lt;/a&gt; when there's an error in handling an HTTP request. Without it, it's hard to tell where the errant code was. "/>
						</outline>
					</outline>
				</outline>
			<outline text="testing/testdavehttp.js">
				<outline text="const davehttp = require (&quot;../davehttp.js&quot;); "/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); " isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="port: 1401,"/>
					<outline text="flLogToConsole: true"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function startup () {">
					<outline text="davehttp.start (config, function (theRequest) {">
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case &quot;/add&quot;:">
								<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theRequest.params.a + theRequest.params.b);"/>
								<outline text="return;"/>
								</outline>
							<outline text="case &quot;/err&quot;:">
								<outline text="var x = undefined;"/>
								<outline text="return (x.badreference);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, &quot;That's something we can't do for you. Sorry!! ;-(&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="startup ();"/>
				</outline>
			<outline text="testing/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testdavehttp&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Bare bones demo app for davehttp package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveHttp ()"/>
			</outline>
		</body>
	</opml>
